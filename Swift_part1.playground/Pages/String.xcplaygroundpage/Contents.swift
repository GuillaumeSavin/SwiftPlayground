/*:
## Les cha√Ænes de caract√®res
 */
//: Le type `String` d√©crit des cha√Ænes de caract√®res Unicode mutables ou immuables selon que l'on utilise var ou let.
//: La syntaxe pour d√©finir des cha√Ænes litt√©rales est la m√™me que celle du `C` en utilisant des guillemets `"`
let exempleDeChaine = "Bonjour"
//: La concat√©nation de cha√Ænes se fait avec l'op√©rateur `+`
var autreChaine : String = exempleDeChaine + " Leo"
autreChaine += " !"
print(autreChaine)
//: On peut d√©finir des chaines longues sur plusieurs lignes avec des `triple guillemets'
let message = """
    -----------------------------
        Cours de Swift

    LPMI-CDTL DAM
    2018-2019

    leo.donati@univ-cotedazur.fr
    -----------------------------
    """
print(message)
//: Remarquez que l'espace utilis√© avant les guillemets fermants est utilis√© pour indiquer quelles tabulations ignorer dans la chaine...\
//: Comme les String acceptent n'importe quel caract√®re Unicode on peut utiliser certains Emoji dans ces chaines (mais en fait m√™me dans les noms de variable)
let üòÄ = "Bonjour üòù"
print(üòÄ)
//: Pour **initialiser** une variable avec une chaine vide deux syntaxes sont possibles :
var s1 = ""
var s2 = String() //on appelle l'initialisateur du type String
//: ### M√©thodes et Propri√©t√©s
//: Comme String est une classe (en fait un `struct`) il a de tr√®s nombreuses m√©thodes et propri√©t√©s :
s1.isEmpty
autreChaine.lowercased()
autreChaine.uppercased()
"Leo".uppercased()
print(message.count)
//: String est un type `valeur` : quand on le passe comme argument d'une fonction il est recopi√©. Ce n'est pas un type `r√©f√©rence`.
//: ### Les caract√®res
//: Le type `Character` permet de travailler avec les lettres qui composent la cha√Æne et parcourir une chaine dans une bouche `for-in`
let caract√®re : Character = "!"
for c: Character in "Leo" {
    print(c)
}
//: ### Interpolation des cha√Ænes
//: C'est une fa√ßon tr√®s simple d'int√©grer dans une cha√Æne la valeur d'une variable\
//: La syntaxe est `\(variable)` transforme la valeur de `variable` en String
var a = 12
print("Le carr√© de \(a) est \(a*a) ")
print("Ce message a \(message.count) lettres.")
//: ### Manipulation de String
//: Pour extraire, ins√©rer une sous-cha√Æne dans une cha√Æne on utilise un type d'index associ√© `String.Index` qui donne la position d'un caract√®re dans une cha√Æne
exempleDeChaine
var i = exempleDeChaine.startIndex
var j = exempleDeChaine.endIndex
exempleDeChaine[i]
//exempleDeChaine[j]
i = exempleDeChaine.index(after: i)
j = exempleDeChaine.index(before: j)
exempleDeChaine[i]
exempleDeChaine[j]
//: On ne peut pas utiliser les entiers pour acc√©der aux lettres d'une cha√Æne.
//exempleDeChaine[3]
//: le type des variables `i` et `j` est `String.Index` pas `Int`
//: Et pourtant on peut les utiliser dans l'op√©rateur `range` comme les `Int`
let sousChaine = exempleDeChaine[i...]
exempleDeChaine[..<j]
//: [Pr√©d√©dent : Bool](@previous) | page 7 sur  8 |  [Suivant¬†: Tuples](@next)
